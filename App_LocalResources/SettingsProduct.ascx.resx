<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>BBStore Simple Product Settings</value>
  </data>
	<data name="ItemNo.Header" xml:space="preserve">
    <value>Item No.</value>
  </data>
	<data name="Name.Header" xml:space="preserve">
    <value>Name</value>
  </data>
	<data name="SimpleProductId.Header" xml:space="preserve">
    <value>Id</value>
  </data>
	<data name="UnitCost.Header" xml:space="preserve">
    <value>Net price</value>
  </data>
	<data name="cmdDynamic.Text" xml:space="preserve">
    <value>dynamic</value>
  </data>
	<data name="lblSelected.Text" xml:space="preserve">
    <value>Your choice:</value>
  </data>
	<data name="DynamicSelected.Message" xml:space="preserve">
    <value>Dynamic Product</value>
  </data>
	<data name="NoSelected.Message" xml:space="preserve">
    <value>No selection</value>
  </data>
	<data name="ShowNetPrice.Cart.Text" xml:space="preserve">
    <value>See store settings</value>
  </data>
	<data name="ShowNetPrice.Gross.Text" xml:space="preserve">
    <value>Gross</value>
  </data>
	<data name="ShowNetPrice.Net.Text" xml:space="preserve">
    <value>Net</value>
  </data>
	<data name="DeleteProductTemplate.Text" xml:space="preserve">
    <value>Are you sure to delete this product template? Products which are using this template will return to default display !</value>
  </data>
	<data name="lblProductTemplate.Text" xml:space="preserve">
    <value>Product Template</value>
  </data>
	<data name="lblProductTemplateName.Help" xml:space="preserve">
    <value>Enter a name to save as a template</value>
  </data>
	<data name="lblProductTemplateName.Text" xml:space="preserve">
    <value>Template Name</value>
  </data>
	<data name="lblShowNetPrice.Help" xml:space="preserve">
    <value>Show price as defined in cart module or without or with tax included</value>
  </data>
	<data name="lblShowNetPrice.Text" xml:space="preserve">
    <value>Price w/o tax</value>
  </data>
	<data name="lnkReset.Text" xml:space="preserve">
    <value>Reset to default</value>
  </data>
	<data name="lblStatic.Help" xml:space="preserve">
    <value>Select the product which should be displayed permanently in this module</value>
  </data>
	<data name="lblOpenCartOnAdd.Help" xml:space="preserve">
    <value>Check if page with cart should be opened when product is added</value>
  </data>
	<data name="lblOpenCartOnAdd.Text" xml:space="preserve">
    <value>Show Cart</value>
  </data>
	<data name="lblSearch.Text" xml:space="preserve">
    <value>Search</value>
  </data>
	<data name="lblSearch.Help" xml:space="preserve">
    <value>Enter a phrase to look for in ItemNo, Title, Short- and Longdescription</value>
  </data>
	<data name="lblContactModulePage.Help" xml:space="preserve">
    <value>Select the page which contains the BBStore Contact Module (if needed)</value>
  </data>
	<data name="lblContactModulePage.Text" xml:space="preserve">
    <value>Contact Module Page</value>
  </data>
	<data name="Individual.Text" xml:space="preserve">
		<value>(individual)</value>
	</data>
	<data name="hdrGlobal.Text" xml:space="preserve">
		<value>Global Settings</value>
	</data>
	<data name="hdrTemplates.Text" xml:space="preserve">
		<value>Templates</value>
	</data>
	<data name="hdrProduct.Text" xml:space="preserve">
		<value>Product</value>
	</data>
	<data name="rblSelectTypeDynamic.Text" xml:space="preserve">
		<value>Dynamic </value>
	</data>
	<data name="rblSelectTypeStatic.Text" xml:space="preserve">
		<value>Static</value>
	</data>
	<data name="lblSelectType.Text" xml:space="preserve">
		<value>Displaytype</value>
	</data>
	<data name="lblSelectType.Help" xml:space="preserve">
		<value>Select the type of display. You can choose between always showing the same product (static) or depending on passed parameter 'productid' (dynamic). If static please select a product from the list .</value>
	</data>
	<data name="lblStatic.Text" xml:space="preserve">
		<value>Static product</value>
	</data>
	<data name="lblListModulePage.Text" xml:space="preserve">
		<value>List Module Page</value>
	</data>
	<data name="lblListModulePage.Help" xml:space="preserve">
		<value>Select the page to be displayed automatically if no product is selected</value>
	</data>
	<data name="lblSetModuleTitle.Text" xml:space="preserve">
		<value>Set module title</value>
	</data>
	<data name="lblSetModuleTitle.Help" xml:space="preserve">
		<value>Check if you want to set the module title as product name</value>
	</data>
</root>